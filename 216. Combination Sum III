Find all possible combinations of k numbers that add up to a number n, given that only numbers from 1 to 9 can be used and each combination should be a unique set of numbers.


Example 1:

Input: k = 3, n = 7

Output:

[[1,2,4]]

Example 2:

Input: k = 3, n = 9

Output:

[[1,2,6], [1,3,5], [2,3,4]]

public class Solution {
    public List<List<Integer>> combinationSum3(int k, int n) {
      List<Integer> ans = new ArrayList<Integer>();
      List<List<Integer>> result = new ArrayList<List<Integer>>();
      if(k < 1 || n < 1) {
        return result;
      }
      res(result, ans, k, n, 0, 1);
      return result;
    }
    private void res(List<List<Integer>> result,List<Integer> ans, int k, int n, int sum, int addnum) {
        if (k == 0 && sum == n) {
          result.add(new ArrayList(ans));
          return;
        } else if ( k < 0 || sum > n) {
          return;
        }
        for (int i = addnum; i < 10; i ++) {
          ans.add(i);
          res(result, ans, k - 1, n,sum + i, i + 1);
          ans.remove(ans.size() - 1);
        }
     }
}
