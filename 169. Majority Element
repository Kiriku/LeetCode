Given an array of size n, find the majority element. The majority element is the element that appears more than ⌊ n/2 ⌋ times.

You may assume that the array is non-empty and the majority element always exist in the array.

Credits:
Special thanks to @ts for adding this problem and creating all test cases.

Subscribe to see which companies asked this question


public class Solution {
    public int majorityElement(int[] nums) {
        int n = nums.length/2;
        HashMap<Integer, Integer> hashMap = new HashMap<Integer, Integer>();
        for (int a : nums) {
          if (!hashMap.containsKey(a)) {
            hashMap.put(a,hashMap.getValue(a)+1);
          } else {
            hashMap.put(a, 1);
          }
        }
        for(Map.Entry<Integer, Integer>entry:hashMap.entrySet()) {
          if(entry.getValue() > n) {
            return entry.getKey();
          }
        }
        return 0;
    }
}
================================================
public class Solution {
    public int majorityElement(int[] nums) {
      int nTimes = 0;
      int candidate = 0;
      for(int i = 0; i < nums.length; i ++)
      {
          if(nTimes == 0)
          {
              candidate = nums[i];
              nTimes = 1;
          }
          else
          {
              if(candidate == nums[i])
                  nTimes ++;
              else
                  nTimes --;
          }
      }
      return candidate;
  }
}
==================================================
public class Solution {
    public int majorityElement(int[] nums) {
      int[] bits = new int[32];
      int ans = 0;
      for(int i = 0; i < 32; i ++) {
        for (int j = 0; j < nums.length; j ++) {
          bits[i] = (nums[j] >> i) & 1;
        }
      }
      for(int i = 0 ; i < 32; i ++) {
        if (bits[i] == 1) {
          ans += 1 << i;
        }
      }
      return ans;
    }
}
