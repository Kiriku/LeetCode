Given a string array words, find the maximum value of length(word[i]) * length(word[j]) where the two words do not share common letters. You may assume that each word will contain only lower case letters. If no such two words exist, return 0.

Example 1:
Given ["abcw", "baz", "foo", "bar", "xtfn", "abcdef"]
Return 16
The two words can be "abcw", "xtfn".

Example 2:
Given ["a", "ab", "abc", "d", "cd", "bcd", "abcd"]
Return 4
The two words can be "ab", "cd".

Example 3:
Given ["a", "aa", "aaa", "aaaa"]
Return 0
No such pair of words.

public class Solution {
  public int maxProduct(String[] words) {
      int[] wordsMask = new int[words.length];
      int product = 0;
      int tmpProduct = 0;
      for(int i = 0; i < words.length; i++ ) {
        wordsMask[i] = 0;
      }
      for(int i = 0; i < words.length; i++ ) {
        String word = words[i];
        for (char a:word.toCharArray()) {
          wordsMask[i] = wordsMask[i] | (1 << a - 'a');
        }
      }
      for (int i = 0; i < wordsMask.length; i++) {
        for (int j = 1; j < wordsMask.length; j++) {
          if (wordsMask[i] != 0 && wordsMask[j] != 0 && (wordsMask[i] & wordsMask[j]) == 0) {
            tmpProduct = words[i].length() * words[j].length();
          }
          if (product < tmpProduct) {
            product = tmpProduct;
          }
        }
      }
      return product;
  }
}

==============================================
public int maxProduct(String[] words) {
    int n = words.length, max = 0;
    int[] mask = new int[n];
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < words[i].length(); j++)
            mask[i] |= 1 << (words[i].charAt(j) - 'a');
        for (int j = 0; j < i; j++)
            if ((mask[j] & mask[i]) == 0)
                max = Math.max(max, words[i].length() * words[j].length());
    }
    return max;
}
