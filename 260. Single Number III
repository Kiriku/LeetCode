/* Given an array of numbers nums, in which exactly two elements appear only once and all the other elements appear exactly twice. Find the two elements that appear only once.

For example:

Given nums = [1, 2, 1, 3, 2, 5], return [3, 5].

Note:
The order of the result is not important. So in the above example, [5, 3] is also correct.
Your algorithm should run in linear runtime complexity. Could you implement it using only constant space complexity?
Credits:
Special thanks to @jianchao.li.fighter for adding this problem and creating all test cases.

Subscribe to see which companies asked this question */

public class Solution {
  public int[] singleNumber(int[] nums) {
    int[] result = new int[2];
    result[0] = 0;
    result[1] = 0;
    int xorResult = 0;
    int indexbit = 0;
    for (int i = 0; i < (nums.length) ; i ++) {
        xorResult = nums[i]^xorResult;
    }
    indexbit = getBit(xorResult);
    for(int i = 0; i < nums.length; i++) {
        if(checkBit(nums[i], indexbit))
            result[0] = nums[i]^result[0];
        else
            result[1] = nums[i]^result[1];
    }
    return result;

  }
  private int getBit (int number) {
    int indexbit = 0;
    while(((number&1) == 0) && indexbit < 32 ){
        number = number >>1;
        indexbit++;
    }
    return indexbit;
  }
  private boolean checkBit(int num, int indexbit) {
      num = num >> indexbit;
      if((num & 1) == 1)
          return true;
      else
          return false;
  }
}

0011
0100

0100

01XX^01XX

X0XX^X0XX
