Given an array of n integers where n > 1, nums, return an array output such that output[i]

is equal to the product of all the elements of nums except nums[i].

Solve it without division and in O(n).

For example, given [1,2,3,4], return [24,12,8,6].

Follow up:
Could you solve it with constant space complexity?

(Note: The output array does not count as extra space for the purpose of space complexity analysis.)

Subscribe to see which companies asked this question

public class Solution {
  public int[] productExceptSelf(int[] nums) {
      int n = nums.length;
      int right = nums[n-1];
      int left = 1;
      int[] result = new int[n];
      result[0] = 1;
      for(int i = 1; i < n; i ++) {
          left *=nums[i-1];
          result[i] += left;
      }
      for(int i = 1; i < n; i++) {
          result[n-i-1] *= right;
          right *= nums[n-i-1];
      }
      return result;
  }
}
